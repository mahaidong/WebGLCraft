{
  "version": 3,
  "file": "minecraft.js",
  "sourceRoot": "../",
  "sources": [
    "lib/minecraft.coffee"
  ],
  "names": [],
  "mappings": "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",
  "sourcesContent": [
    "# Imports\r\n{Object3D, Matrix4, Scene, Mesh, WebGLRenderer, PerspectiveCamera} = THREE\r\n{CubeGeometry, PlaneGeometry, MeshLambertMaterial, MeshNormalMaterial} = THREE\r\n{AmbientLight, DirectionalLight, PointLight, Raycaster, Vector3, Vector2} = THREE\r\n{MeshLambertMaterial, MeshNormalMaterial, Projector} = THREE\r\n{Texture, UVMapping, RepeatWrapping, RepeatWrapping, NearestFilter} = THREE\r\n{LinearMipMapLinearFilter, ClampToEdgeWrapping, Clock} = THREE\r\n\r\nvec = (x, y, z) -> new Vector3 x, y, z\r\nCubeSize = 50\r\n\r\nclass Player\r\n    width:  CubeSize * 0.3\r\n    depth:  CubeSize * 0.3\r\n    height: CubeSize * 1.63\r\n\r\n    constructor: ->\r\n        @halfHeight = @height / 2\r\n        @halfWidth  = @width / 2\r\n        @halfDepth  = @depth / 2\r\n        @pos = vec()\r\n        @eyesDelta = @halfHeight * 0.9\r\n\r\n    eyesPosition: ->\r\n        ret = @pos.clone()\r\n        ret.y += @eyesDelta\r\n        return ret\r\n\r\n    position: (axis) ->\r\n        return @pos unless axis?\r\n        return @pos[axis]\r\n\r\n    incPosition: (axis, val) ->\r\n        @pos[axis] += val\r\n        return\r\n\r\n    setPosition: (axis, val) ->\r\n        @pos[axis] = val\r\n        return\r\n\r\n    collidesWithGround: -> @position('y') < @halfHeight\r\n\r\n    vertex: (vertexX, vertexY, vertexZ) ->\r\n        vertex = @position().clone()\r\n        vertex.x += vertexX * @halfWidth\r\n        vertex.y += vertexY * @halfHeight\r\n        vertex.z += vertexZ * @halfDepth\r\n        return vertex\r\n\r\n    boundingBox: ->\r\n        vmin = @vertex(-1, -1, -1)\r\n        vmax = @vertex 1, 1, 1\r\n        return {vmin: vmin, vmax: vmax}\r\n\r\nclass Grid\r\n    constructor: (@size = 5) ->\r\n        @matrix = []\r\n        @size.times (i) =>\r\n            @matrix[i] = []\r\n            @size.times (j) =>\r\n                @matrix[i][j] = []\r\n        @map = JSON.parse(JSON.stringify(@matrix)) #deep copy\r\n\r\n    insideGrid: (x, y, z) -> 0 <= x < @size and 0 <= y < @size and 0 <= z < @size\r\n\r\n    get: (x, y, z) -> @matrix[x][y][z]\r\n    put: (x, y, z, val) -> \r\n        @matrix[x][y][z] = val\r\n        return @map[x][y][z] = null unless val\r\n        @map[x][y][z] = val.material.materials[0].map.image.src.match(/\\/([a-zA-Z0-9_]*)\\..*$/)[1] # hack to take cubeName\r\n\r\n    gridCoords: (x, y, z) ->\r\n        x = Math.floor(x / CubeSize)\r\n        y = Math.floor(y / CubeSize)\r\n        z = Math.floor(z / CubeSize)\r\n        return [x, y, z]\r\n\r\nclass CollisionHelper\r\n    constructor: (@player, @grid)-> return\r\n    rad: CubeSize\r\n    halfRad: CubeSize / 2\r\n\r\n    collides: ->\r\n        return true if @player.collidesWithGround()\r\n        return true if @beyondBounds()\r\n        playerBox = @player.boundingBox()\r\n        for cube in @possibleCubes()\r\n            return true if @_collideWithCube playerBox, cube\r\n        return false\r\n\r\n    beyondBounds: ->\r\n        p = @player.position()\r\n        [x, y, z] = @grid.gridCoords p.x, p.y, p.z\r\n        return true unless @grid.insideGrid x, 0, z\r\n\r\n    _addToPosition: (position, value) ->\r\n        pos = position.clone()\r\n        pos.x += value\r\n        pos.y += value\r\n        pos.z += value\r\n        return pos\r\n\r\n    collideWithCube: (cube) -> @_collideWithCube @player.boundingBox(), cube\r\n\r\n    _collideWithCube: (playerBox, cube) ->\r\n        vmin = @_addToPosition cube.position, -@halfRad\r\n        vmax = @_addToPosition cube.position, @halfRad\r\n        cubeBox = {vmin, vmax}\r\n        return CollisionUtils.testCubeCollision playerBox, cubeBox\r\n\r\n    possibleCubes: ->\r\n        cubes = []\r\n        grid = @grid\r\n        @withRange (x, y, z) ->\r\n            cube = grid.get x, y, z\r\n            cubes.push cube if cube?\r\n        return cubes\r\n\r\n    withRange: (func) ->\r\n        {vmin, vmax} = @player.boundingBox()\r\n        minx = @toGrid(vmin.x)\r\n        miny = @toGrid(vmin.y)\r\n        minz = @toGrid(vmin.z)\r\n\r\n        maxx = @toGrid(vmax.x + @rad)\r\n        maxy = @toGrid(vmax.y + @rad)\r\n        maxz = @toGrid(vmax.z + @rad)\r\n        x = minx\r\n        while x <= maxx\r\n            y = miny\r\n            while y <= maxy\r\n                z = minz\r\n                while z <= maxz\r\n                    func x, y, z\r\n                    z++\r\n                y++\r\n            x++\r\n        return\r\n\r\n    toGrid: (val) ->\r\n        ret = Math.floor(val / @rad)\r\n        return 0 if ret < 0\r\n        return @grid.size - 1 if ret > @grid.size - 1\r\n        return ret\r\n\r\n\r\nTextureHelper =\r\n    loadTexture: (path) ->\r\n        image = new Image()\r\n        image.src = path\r\n        texture = new Texture(image,\r\n                              new UVMapping(),\r\n                              ClampToEdgeWrapping,\r\n                              ClampToEdgeWrapping,\r\n                              NearestFilter,\r\n                              LinearMipMapLinearFilter)\r\n        image.onload = -> texture.needsUpdate = true\r\n        new THREE.MeshLambertMaterial(map: texture, ambient: 0xbbbbbb)\r\n\r\n    tileTexture: (path, repeatx, repeaty) ->\r\n        image = new Image()\r\n        image.src = path\r\n        texture = new Texture(image,\r\n                              new UVMapping(),\r\n                              RepeatWrapping,\r\n                              RepeatWrapping,\r\n                              NearestFilter,\r\n                              LinearMipMapLinearFilter)\r\n        texture.repeat.x = repeatx\r\n        texture.repeat.y = repeaty\r\n        image.onload = -> texture.needsUpdate = true\r\n        new THREE.MeshLambertMaterial(map: texture, ambient: 0xbbbbbb)\r\n\r\n\r\nclass Floor\r\n    constructor: (width, height) ->\r\n        repeatX = width / CubeSize\r\n        repeatY = height / CubeSize\r\n        material = TextureHelper.tileTexture(\"./textures/bedrock.png\", repeatX, repeatY)\r\n\r\n        planeGeo = new PlaneGeometry(width, height, 1, 1)\r\n        plane = new Mesh(planeGeo, material)\r\n        plane.position.y = -1\r\n        plane.rotation.x = -Math.PI / 2\r\n        plane.name = 'floor'\r\n        @plane = plane\r\n\r\n    addToScene: (scene) -> scene.add @plane\r\n\r\nclass Game\r\n    constructor: (@populateWorldFunction) ->\r\n        @rad = CubeSize\r\n\r\n        @currentMeshSpec = @createGrassGeometry()\r\n        @cubeBlocks      = @createBlocksGeometry()\r\n\r\n        @selectCubeBlock 'cobblestone'\r\n        @move = {x: 0, z: 0, y: 0}\r\n        @keysDown = {}\r\n\r\n        @grid = new Grid(100)\r\n\r\n        @onGround = true\r\n        @pause = off\r\n        @fullscreen = off\r\n\r\n        @renderer = @createRenderer()\r\n        @rendererPosition = $(\"#minecraft-container canvas\").offset()\r\n\r\n        @camera = @createCamera()\r\n\r\n        THREEx.WindowResize @renderer, @camera\r\n        @canvas = @renderer.domElement\r\n        @controls = new Controls @camera, @canvas\r\n        @player = new Player()\r\n        @scene  = new Scene()\r\n\r\n        new Floor(50000, 50000).addToScene @scene\r\n        @scene.add @camera\r\n        @addLights @scene\r\n\r\n        @projector = new Projector()\r\n        @castRay = null\r\n        @moved = false\r\n        @toDelete = null\r\n\r\n        @collisionHelper = new CollisionHelper(@player, @grid)\r\n        @clock = new Clock()\r\n        @populateWorld()\r\n        @defineControls()\r\n\r\n    width: -> window.innerWidth\r\n    height: -> window.innerHeight\r\n\r\n    createBlocksGeometry: ->\r\n        cubeBlocks = {}\r\n        for b in Blocks\r\n            geo = new THREE.CubeGeometry @rad, @rad, @rad, 1, 1, 1\r\n            t = @texture(b)\r\n            cubeBlocks[b] = @meshSpec geo, [t, t, t, t, t, t]\r\n        return cubeBlocks\r\n\r\n    createGrassGeometry: ->\r\n        [grass_dirt, grass, dirt] = @textures \"grass_dirt\", \"grass\", \"dirt\"\r\n        materials = [grass_dirt, #right\r\n                     grass_dirt, # left\r\n                     grass, # top\r\n                     dirt, # bottom\r\n                     grass_dirt, # back\r\n                     grass_dirt]  #front\r\n        @meshSpec new THREE.CubeGeometry( @rad, @rad, @rad, 1, 1, 1), materials\r\n\r\n    texture: (name) -> TextureHelper.loadTexture \"./textures/#{name}.png\"\r\n\r\n    textures: (names...) -> return (@texture name for name in names)\r\n\r\n    gridCoords: (x, y, z) -> @grid.gridCoords x, y, z\r\n\r\n    meshSpec: (geometry, material) -> {geometry, material}\r\n\r\n\r\n    intoGrid: (x, y, z, val) ->\r\n        args = @gridCoords(x, y, z).concat(val)\r\n        return @grid.put args...\r\n\r\n\r\n    generateHeight: ->\r\n        size = 11\r\n        data = []\r\n        size.times (i) ->\r\n            data[i] = []\r\n            size.times (j) ->\r\n                data[i][j] = 0\r\n        perlin = new ImprovedNoise()\r\n        quality = 0.05\r\n        z = Math.random() * 100\r\n        4.times (j) ->\r\n            size.times (x) ->\r\n                size.times (y) ->\r\n                    noise = perlin.noise(x / quality, y / quality, z)\r\n                    data[x][y] += noise * quality\r\n            quality *= 4\r\n        data\r\n\r\n    haveSave: -> !!localStorage[\"map\"] and !!localStorage[\"position\"] and !! localStorage[\"direction\"]\r\n\r\n    loadWorld: ->\r\n        map = JSON.parse localStorage[\"map\"]\r\n        position = JSON.parse localStorage[\"position\"]\r\n        direction = JSON.parse localStorage[\"direction\"]\r\n\r\n        @player.pos.set position...\r\n        @controls.setDirection direction\r\n\r\n        for mapYZ,x in map\r\n            for mapZ,y in mapYZ\r\n                for cubeName,z in mapZ\r\n                    @cubeAt x,y,z, @cubeBlocks[cubeName] if cubeName\r\n\r\n    populateWorld: ->\r\n      return @loadWorld() if @haveSave()\r\n      middle = @grid.size / 2\r\n      data = @generateHeight()\r\n      playerHeight = null\r\n\r\n      for i in [-5..5]\r\n        for j in [-5..5]\r\n          height =(Math.abs Math.floor(data[i + 5][j + 5])) + 1\r\n          playerHeight = (height + 1) * CubeSize if i == 0 and j == 0\r\n          height.times (k) => @cubeAt middle + i , k, middle + j\r\n      middlePos = middle * CubeSize\r\n      @player.pos.set middlePos, playerHeight, middlePos\r\n\r\n    populateWorld2: ->\r\n        middle = @grid.size / 2\r\n        ret = if @populateWorldFunction?\r\n            setblockFunc = (x, y, z, blockName) =>\r\n                @cubeAt x, y, z, @cubeBlocks[blockName]\r\n            @populateWorldFunction setblockFunc, middle\r\n        else\r\n            [middle, 3, middle] \r\n        pos = (i * CubeSize for i in ret)\r\n        @player.pos.set pos...\r\n\r\n    cubeAt: (x, y, z, meshSpec, validatingFunction) ->\r\n        meshSpec or=@currentMeshSpec\r\n        raise \"bad material\" unless meshSpec.geometry?\r\n        raise \"really bad material\" unless meshSpec.material?\r\n        mesh = new Mesh(meshSpec.geometry, new THREE.MeshFaceMaterial(meshSpec.material))\r\n        mesh.geometry.dynamic = false\r\n        halfcube = CubeSize / 2\r\n        mesh.position.set CubeSize * x, y * CubeSize + halfcube, CubeSize * z\r\n        mesh.name = \"block\"\r\n\r\n        if validatingFunction?\r\n            return unless validatingFunction(mesh)\r\n\r\n        @grid.put x, y, z, mesh\r\n        @scene.add mesh\r\n        mesh.updateMatrix()\r\n        mesh.matrixAutoUpdate = false\r\n        return\r\n\r\n    createCamera: ->\r\n        camera = new PerspectiveCamera(45, @width() / @height(), 1, 10000)\r\n        camera.lookAt vec 0, 0, 0\r\n        camera\r\n\r\n    createRenderer: ->\r\n        renderer = new WebGLRenderer(antialias: true)\r\n        renderer.setSize @width(), @height()\r\n        renderer.setClearColorHex(0xBFD1E5, 1.0)\r\n        renderer.clear()\r\n        $('#minecraft-container').append(renderer.domElement)\r\n        renderer\r\n\r\n    addLights: (scene) ->\r\n        ambientLight = new AmbientLight(0xaaaaaa)\r\n        scene.add ambientLight\r\n        directionalLight = new DirectionalLight(0xffffff, 1)\r\n        directionalLight.position.set 1, 1, 0.5\r\n        directionalLight.position.normalize()\r\n        scene.add directionalLight\r\n\r\n    defineControls: ->\r\n        bindit = (key) =>\r\n            $(document).bind 'keydown', key, =>\r\n                @keysDown[key] = true\r\n                return false\r\n            $(document).bind 'keyup', key, =>\r\n                @keysDown[key] = false\r\n                return false\r\n        for key in \"wasd\".split('').concat('space', 'up', 'down', 'left', 'right')\r\n            bindit key\r\n        $(document).bind 'keydown', 'p', => @togglePause()\r\n        $(document).bind 'keydown', 'k', => @save()\r\n        for target in [document, @canvas]\r\n            $(target).mousedown (e) => @onMouseDown e\r\n            $(target).mouseup (e)   => @onMouseUp e\r\n            $(target).mousemove (e) => @onMouseMove e\r\n\r\n    save: ->\r\n        localStorage[\"map\"] = JSON.stringify @grid.map\r\n        localStorage[\"position\"] = JSON.stringify [ @player.position(\"x\"),@player.position(\"y\"),@player.position(\"z\")]\r\n        localStorage[\"direction\"] = JSON.stringify @controls.getDirection()\r\n\r\n    togglePause: ->\r\n        @pause = !@pause\r\n        @clock.start() if @pause is off\r\n        return\r\n\r\n    relativePosition: (x, y) ->\r\n        [x - @rendererPosition.left, y - @rendererPosition.top]\r\n\r\n    onMouseUp: (e) ->\r\n        if not @moved and MouseEvent.isLeftButton e\r\n            @toDelete = @_targetPosition(e)\r\n        @moved = false\r\n\r\n    onMouseMove: (event) -> @moved = true\r\n\r\n    onMouseDown: (e) ->\r\n        @moved = false\r\n        return unless MouseEvent.isRightButton e\r\n        @castRay = @_targetPosition(e)\r\n\r\n    _targetPosition: (e) ->\r\n        return @relativePosition(@width() / 2, @height() / 2) if @fullscreen\r\n        @relativePosition(e.pageX, e.pageY)\r\n\r\n    deleteBlock: ->\r\n        return unless @toDelete?\r\n        [x, y] = @toDelete\r\n        x = (x / @width()) * 2 - 1\r\n        y = (-y / @height()) * 2 + 1\r\n        vector = vec x, y, 1\r\n        @projector.unprojectVector vector, @camera\r\n        todir = vector.sub(@camera.position).normalize()\r\n        @deleteBlockInGrid new Raycaster @camera.position, todir\r\n        @toDelete = null\r\n        return\r\n\r\n    findBlock: (ray) ->\r\n        for o in ray.intersectObjects(@scene.children)\r\n            return o unless o.object.name is 'floor'\r\n        return null\r\n\r\n\r\n    deleteBlockInGrid: (ray) ->\r\n        target = @findBlock ray\r\n        return unless target?\r\n        return unless @withinHandDistance target.object.position\r\n        mesh = target.object\r\n        @scene.remove mesh\r\n        {x, y, z} = mesh.position\r\n        @intoGrid x, y, z, null\r\n        return\r\n\r\n\r\n    placeBlock: ->\r\n        return unless @castRay?\r\n        [x, y] = @castRay\r\n        x = (x / @width()) * 2 - 1\r\n        y = (-y / @height()) * 2 + 1\r\n        vector = vec x, y, 1\r\n        @projector.unprojectVector vector, @camera\r\n        todir = vector.sub(@camera.position).normalize()\r\n        @placeBlockInGrid new Raycaster @camera.position, todir\r\n        @castRay = null\r\n        return\r\n\r\n    getAdjacentCubePosition: (target) ->\r\n        normal = target.face.normal.clone()\r\n        p = target.object.position.clone().add normal.multiplyScalar(CubeSize)\r\n        return p\r\n\r\n    addHalfCube: (p) ->\r\n        p.y += CubeSize / 2\r\n        p.z += CubeSize / 2\r\n        p.x += CubeSize / 2\r\n        return p\r\n\r\n    getCubeOnFloorPosition: (raycast) ->\r\n        ray = raycast.ray\r\n        return null if ray.direction.y >= 0\r\n        ret = vec()\r\n        o = ray.origin\r\n        v = ray.direction\r\n        t = (-o.y) / v.y\r\n        ret.y = 0\r\n        ret.x = o.x + t * v.x\r\n        ret.z = o.z + t * v.z\r\n        return @addHalfCube ret\r\n\r\n    selectCubeBlock: (name) ->\r\n        @currentCube = @cubeBlocks[name]\r\n\r\n    getNewCubePosition: (ray) ->\r\n        target = @findBlock ray\r\n        return @getCubeOnFloorPosition ray unless target?\r\n        return @getAdjacentCubePosition target\r\n\r\n    createCubeAt: (x, y, z) ->\r\n        @cubeAt x, y, z, @currentCube, (cube) => not @collisionHelper.collideWithCube cube\r\n\r\n    handLength: 7\r\n\r\n    withinHandDistance: (pos) ->\r\n        dist = pos.distanceTo @player.position()\r\n        return dist <= CubeSize * @handLength\r\n\r\n    placeBlockInGrid: (ray) ->\r\n        p = @getNewCubePosition ray\r\n        return unless p?\r\n        gridPos = @gridCoords p.x, p.y, p.z\r\n        [x, y, z] = gridPos\r\n        return unless @withinHandDistance p\r\n        return unless @grid.insideGrid x, y, z\r\n        return if @grid.get(x, y, z)?\r\n        @createCubeAt x, y, z\r\n        return\r\n\r\n    collides: -> @collisionHelper.collides()\r\n\r\n    start: ->\r\n        animate = =>\r\n            @tick() unless @pause\r\n            requestAnimationFrame animate, @renderer.domElement\r\n        animate()\r\n\r\n    enablePointLock: =>\r\n        $(\"#cursor\").show()\r\n        @fullscreen = on\r\n\r\n    disablePointLock: =>\r\n        $(\"#cursor\").hide()\r\n        @fullscreen = off\r\n\r\n    axes: ['x', 'y', 'z']\r\n    iterationCount: 10\r\n\r\n    moveCube: (speedRatio) ->\r\n        @defineMove()\r\n        iterationCount = Math.round(@iterationCount * speedRatio)\r\n        while iterationCount-- > 0\r\n            @applyGravity()\r\n            for axis in @axes when @move[axis] isnt 0\r\n                originalpos = @player.position(axis)\r\n                @player.incPosition axis, @move[axis]\r\n                if @collides()\r\n                    @player.setPosition axis, originalpos\r\n                    @onGround = true if axis is 'y' and @move.y < 0\r\n                else if axis is 'y' and @move.y <= 0\r\n                    @onGround = false\r\n        return\r\n\r\n\r\n    playerKeys:\r\n        w: 'z+'\r\n        up: 'z+'\r\n        s: 'z-'\r\n        down: 'z-'\r\n        a: 'x+'\r\n        left: 'x+'\r\n        d: 'x-'\r\n        right: 'x-'\r\n\r\n    shouldJump: -> @keysDown.space and @onGround\r\n\r\n    defineMove: ->\r\n        baseVel = .4\r\n        jumpSpeed = .8\r\n        @move.x = 0\r\n        @move.z = 0\r\n        for key, action of @playerKeys\r\n            [axis, operation] = action\r\n            vel = if operation is '-' then -baseVel else baseVel\r\n            @move[axis] += vel if @keysDown[key]\r\n        if @shouldJump()\r\n            @onGround = false\r\n            @move.y = jumpSpeed\r\n        @garanteeXYNorm()\r\n        @projectMoveOnCamera()\r\n        return\r\n\r\n    garanteeXYNorm: ->\r\n        if @move.x != 0 and @move.z != 0\r\n            ratio = Math.cos(Math.PI / 4)\r\n            @move.x *= ratio\r\n            @move.z *= ratio\r\n        return\r\n\r\n    projectMoveOnCamera: ->\r\n        {x, z} = @controls.viewDirection()\r\n        frontDir = new Vector2(x, z).normalize()\r\n        rightDir = new Vector2(frontDir.y, -frontDir.x)\r\n        frontDir.multiplyScalar @move.z\r\n        rightDir.multiplyScalar @move.x\r\n        @move.x = frontDir.x + rightDir.x\r\n        @move.z = frontDir.y + rightDir.y\r\n\r\n\r\n    applyGravity: -> @move.y -= .005 unless @move.y < -1\r\n\r\n    setCameraEyes: ->\r\n        pos = @player.eyesPosition()\r\n        @controls.move pos\r\n        eyesDelta = @controls.viewDirection().normalize().multiplyScalar(20)\r\n        eyesDelta.y = 0\r\n        pos.sub eyesDelta\r\n        return\r\n\r\n    idealSpeed: 1 / 60\r\n\r\n    tick: ->\r\n        speedRatio = @clock.getDelta() / @idealSpeed\r\n        @placeBlock()\r\n        @deleteBlock()\r\n        @moveCube speedRatio\r\n        @renderer.clear()\r\n        @controls.update()\r\n        @setCameraEyes()\r\n        @renderer.render @scene, @camera\r\n        return\r\n\r\n@Minecraft =\r\n\r\n    start: ->\r\n        $('#instructions').hide()\r\n\r\n        $(document).bind \"contextmenu\", -> false\r\n\r\n        return Detector.addGetWebGLMessage() unless Detector.webgl\r\n        startGame = ->\r\n            game = new Game()\r\n            new BlockSelection(game).insert()\r\n\r\n            $(\"#minecraft-blocks\").show()\r\n            window.game = game\r\n            game.start()\r\n        new Instructions(startGame).insert()\r\n\r\n\r\n"
  ]
}